1. goodbye_world.rb:
def goodbye_world(n)
 puts "Goodbye World! #{n}"
end

This algorithm has O(1) because it takes the same amount of time, no matter the size of n.

2. find_largest.rb:
def find_largest(collection)
 largest = collection[0]
 collection.length.times do |i|
   if collection[i] >= largest
     largest = collection[i]
   end
 end
 largest
end

This algorithm has O(n) because it iterates once through a list of length n to find the largest value.

3. find_largest_2D_array.rb:
def find_largest(collection)
 largest = collection[0][0]
 collection.length.times do |i|
   subcollection = collection[i]
   subcollection.length.times do |i|
     if subcollection[i] >= largest
       largest = subcollection[i]
     end
   end
 end
 largest
end

This algorithm has O(n^2) because it iterates through an array of arrays.
The worst case is when the largest value is in the last position of the last array.

4. numbers_recursive.rb:
def numbers(n)
 if (n == 0)
   return 0
 elsif (n == 1)
   return 1
 else
   return numbers(n-1) + numbers(n-2)
 end
end

This algorithm has O(2^n) because the number of operations increases exponentially as n increases.
For example, when n=2 it takes only 2 operations, but when n=6 it takes 13 operations.
[Recursive Fibonacci]

5. numbers_iterative.rb:
def iterative(n)
 num1 = 0
 num2 = 1

 i = 0
 while i < n-1
   tmp = num1 + num2
   num1 = num2
   num2 = tmp
   i+=1
 end

 num2
end

This algorithm has O(n) because it iterates from n-1 to 0 in order to calculate the number.
[Iterative Fibonacci]

6. sort.rb:
def sort(collection, from=0, to=nil)
 if to == nil
   # Sort the whole collection, by default
   to = collection.count - 1
 end

 if from >= to
   # Done sorting
   return
 end

 # Take a pivot value, at the far left
 pivot = collection[from]

 # Min and Max pointers
 min = from
 max = to

 # Current free slot
 free = min

 while min < max
   if free == min # Evaluate collection[max]
     if collection[max] <= pivot # Smaller than pivot, must move
       collection[free] = collection[max]
       min += 1
       free = max
     else
       max -= 1
     end
   elsif free == max # Evaluate collection[min]
     if collection[min] >= pivot # Bigger than pivot, must move
       collection[free] = collection[min]
       max -= 1
       free = min
     else
       min += 1
     end
   else
     raise "Inconsistent state"
   end
 end

 collection[free] = pivot

 quick_sort collection, from, free - 1
 quick_sort collection, free + 1, to

 collection
end

This algorithm has an average run time of n*log(n) because in general the array reduces in size by half every cycle, and the comparisons take linear time.
However, if the array is partitioned in the worst way every cycle (i.e. gives an array of 1 and an array of n-1), then the recursion depth would be n and it would have O(n^2)
[Quick Sort]
